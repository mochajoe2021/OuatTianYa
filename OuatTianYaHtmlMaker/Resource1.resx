<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RsaPublisher" xml:space="preserve">
    <value>LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3l0OGV1QnhhZHpjckQKQXptWThlNS84MDlCZEdsZm5ZYmZ5SlR2YkQ3RnUva3dzQ0dDOUdRdDRQcU93VmtBRUxxMURoWWs1VThickFkdwo4YkFQZWxaL0g2d3VTTURFdmd4Wm52ZDFRZ3NvR0QwcjhndFcrOUozeENBUnUraG1aaHdBWWU2dWpnYnpHM1FWCm1aYndjdmMxQi9uU1ZSNDFCalVVaEQ3NnRTZDRjVnovUmttRjFYV3J6VGVGbFFOenVJRWFjc0ZucWVDWkE5cGEKV2t1dkJtd3pGTC83NThpRXl0SHJWL2V2RzVFMDFZV2k3dmJxRjFjRUVETnpnY0d4RXpxMS9seEV6azJqd21ReAplTCtrdHRXdUVYMXpPUTF2RnZSd0h4WE9QZkFOcmxUWkpKS3VCL0dsQS83ZitLN1Fza2cyb1JNaDI1M2pXWEVWCnRjZWJEdmNkQWdNQkFBRUNnZ0VBUzR4VTVNUXFVMXNETTV6UlpFNGhQQVZtbzR6S1hwa0F3dWpQek1ZOVl1a3IKVmVHZXlQVDJ4RTR1bk5vdS9WQVZIU1J2Ui9tSGozTVJValZZNzdJUGpuMmRFNU85cVcyTld2VlFOa2xNM2c0aApEY3FyOElGVFh6MlJNTzMyT0JOQ0V3ZFRGb2NEZVJGSjZUZWNEdGtLbDJoZnV3SXdXc25jOW1kUkdEb3NEVVZwCjJ6Wi9Ueko5MVM5OGtWaVBlVFpTT0FKNzUyb2N5encvQVoyQnpvNVA5eGNWOElUYnllQW5udHpoR0t3dStHUmsKTGZERUtUcklEZno4dWg4blRKQmF3dGIyYUNQUHhCV0Z1THVuOXY2SWRMQTlJT0lQQk1iRVdxUGZMRVJrL0ZleApOem5XWE1OclZONGE1Z0ExUXArakE1UHZvQXFCZ1RlcEg2V2lZRFR4SVFLQmdRRGJuMFVEQ2xzUVNqQVZVZy9ICkdIZlNSUDQ2MkR6bzUrdEUzSitLZW5ka2w4Kzh5Ymh1ZUdzdDZ2VUJ5eHc1c2YxbkFOZE1LK0dVL1YyMFdOSUcKYVdOak1mMnIxUkZhYjVQSWxIRlhJTk43aTU3OXM3U0pYajFkUm81RXh1cGExUnM4cXlIK3VOZko0S3ZxQk0rdgo3SHZKTk5LUE1sWmFTUmVDb1hxKzh3WmlRd0tCZ1FEUVVnZXU5Vy9IUXBjaEtKc3ZDS0FwVjRUQXVKNnVBNE1XCmxUSWNZL0Z2eWpobUhFY0txbEJBSTRod3hvYlpOTC9CbldPM044QmFyRDIrci9wTzMySUJlYU1wMUJ0YUxuRG0KdkpUM2lNZnVaYU5Zb2J2UDdFY2l5dDNVTk1ISzRoMGlQbEd6Qk5mMmRPK2c1NS9vNk9ZV21KOC9oTlA2cmNOSApCWlBNV3FRYkh3S0JnUUN5b01CSTBNdHdYR2J2Y0dkVTBCbms5Q2l6UTkyR3Nkc3hqeUJVU1hlQ1lkZWMvWlQ4CmhRVG52QXE3QXJCYVhPSjJQTURnTzNDbTljeVpPd1RZSWkrc0pxVGtkZEEvZGpFRkczZDBIa2JrWFpOYlZpYW8KOC9XRlFEWEd5dU1pTGVLUlhiK3dwamNkQTVmUUowbWxGUHM1azdVT3N5cDVGS29DbmNSd09zb2VjUUtCZ0YxNwpRZ2xvQ0JYeHN1SGxWK1grUitqbFppUVpkTk4vcmZhWFV0cGNtdjVnVDNpNjNjSlNkUnFqRjFvTUxIMFI1NjdaCmt1S24rUUIzWkduS2pGZVNkR2RYRHpuNC9hRTFUK0txNDJwRkRmclR6ejQ1clk3N1oxeWNqbmpvaDhJa1A1Q2IKU0l3OTh5K2NmOS9Ec1FXU1paWGtQU29DMENFZ2tvMnZXZ2lNOERGZkFvR0FDN1RkeFFPTjY5a3ZWL0tsMk5WRApnOW43M244VE0xN2grbGxETnVoN1ZCQXhEWDNJMys5QnlaOE9rTmZBQUcxZXJSSXdXZ25CTEdTaHpmc2J0ZXNCCmdGOE1OK1ZUK1JSMXY1anpvaFVYaFl3cHlUa0dFSktrdlgydjA4WGJTTXpxZmxwTkU0UDdTZCt2cFRyZmdWTVkKYjJZOXB1czM3Q2NYSVk1V1AxajU3Mms9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0KCg==</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Template_Chapters" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>Resources\Template_Chapters_MochajoeBook.json;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="Template_Html_Body" xml:space="preserve">
    <value>PGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJzaG93IiBpZD0ic2hvdyI+CiAgICAgICAgPHA+4piGPC9wPgogICAgPC9kaXY+CiAgICA8ZGl2PgogICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0icHVicHJpa2V5IiBvbmJsdXI9InB1YnByaWtleSgpIiBpZD0icHJpdmtleSIgcm93cz0iMyIgY29scz0iNSI+IC0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLSAtLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tIDwvdGV4dGFyZWE+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJwdWJwcmlrZXkiIG9uYmx1cj0icHVicHJpa2V5KCkiIGlkPSJzaWducHVia2V5IiByb3dzPSIzIiBjb2xzPSI1Ij4gLS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0gLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tIDwvdGV4dGFyZWE+CiAgICAgICAgPHRleHRhcmVhIGlkPSJlYm9vayIgc3R5bGU9ImRpc3BsYXk6bm9uZTsiPiEhIUVCb29rRUJvb2shISE8L3RleHRhcmVhPgogICAgPC9kaXY+CiAgICA8ZGl2IGlkPSJEaXZDaGFwdGVycyI+CiAgICAgICAgPHAgY2xhc3M9IkNoYXB0ZXJzIiBpZD0iQ2hhcHRlcnNoZWFkIj4KICAgICAgICAgICAgPGJyIC8+IDwvcD4KICAgICAgICA8cD48L3A+CiAgICAgICAgPGRpdiBpZD0iQ2hhcHRlciI+IDwvZGl2PgogICAgICAgIDxkaXYgaWQ9IlJlYWRlciI+IDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImhlbHAiIGlkPSJoZWxwIj4KICAgICAgICAgICAgPHA+IOWhq+WlveWFrOmSpeengemSpeOAgiA8L3A+CiAgICAgICAgICAgIDxwPiDngrnlh7vlvIDlp4vliqDovb3jgIIgPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImxvYWRpbmciIGlkPSJsb2FkaW5nIj4KICAgICAgICAgICAgPHA+IOW8gOWni+WKoOi9ve+8jOehrOS7tuS4jeaUr+aMgVJTQeino+Wvhu+8jOayoeacieehrOS7tuaUr+aMge+8jOmAn+W6puS8muW+iOaFou+8jHZlcnkgc2xvd+OAgiA8L3A+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9ib2R5Pgo=</value>
  </data>
  <data name="Template_Html_CSS" xml:space="preserve">
    <value>PHN0eWxlIHR5cGU9InRleHQvY3NzIj4KdGV4dGFyZWEucHVicHJpa2V5CnsKCXdpZHRoOjEwMCU7CgloZWlnaHQ6MTAwJTsKCWJvcmRlcjp0aGluIGRvdWJsZSAjOTA2OwoJdGV4dC1hbGlnbjpsZWZ0Owp9CgpwLkNoYXB0ZXJzCnsKCWNvbG9yOiNGRkVDQkY7CgliYWNrZ3JvdW5kLWNvbG9yOiNGRkIyMDA7CglkaXNwbGF5OmJsb2NrOwoJdmlzaWJpbGl0eTp2aXNpYmxlOwoJY3Vyc29yOnBvaW50ZXI7Cglib3JkZXI6MnB4IHNvbGlkICNGRkIyMDA7Cglmb250LXNpemU6MmVtOwoJdGV4dC1hbGlnbjpjZW50ZXI7CgltYXJnaW46MCBhdXRvOwp9CgpwLkF1dGhvcgp7Cgljb2xvcjojRkZCMjAwOwoJYmFja2dyb3VuZC1jb2xvcjojRkZFQ0JGOwoJZGlzcGxheTpibG9jazsKCXZpc2liaWxpdHk6dmlzaWJsZTsKCWN1cnNvcjpwb2ludGVyOwoJYm9yZGVyOjEwcHggc29saWQgI0ZGRUNCRjsKCWJvcmRlci1yYWRpdXM6MzBweDsKCWZvbnQtc2l6ZToyZW07Cgl0ZXh0LWFsaWduOmxlZnQ7CgltYXJnaW46MCBhdXRvOwp9CgpwLnJlYWQKewoJY29sb3I6I2Q4YTM3MzsKCWJhY2tncm91bmQtY29sb3I6I0NDRjsKCWRpc3BsYXk6YmxvY2s7Cgl2aXNpYmlsaXR5OnZpc2libGU7CgljdXJzb3I6cG9pbnRlcjsKCWJvcmRlcjoxMHB4IHNvbGlkICNDQ0Y7Cglib3JkZXItcmFkaXVzOjMwcHg7Cglmb250LXNpemU6MmVtOwoJdGV4dC1hbGlnbjpsZWZ0Owp9CgpkaXYuc2hvdwp7Cgljb2xvcjojZjk1OwoJdGV4dC1hbGlnbjpyaWdodDsKCWZsb2F0OnJpZ2h0OwoJaGVpZ2h0OjEwcHg7Cn0KCmRpdi5sb2FkaW5nCnsKCWNvbG9yOiNmM2EyNWY7CgliYWNrZ3JvdW5kLWNvbG9yOiNGRkVDQkY7CglkaXNwbGF5OmJsb2NrOwoJdmlzaWJpbGl0eTpoaWRkZW47CgljdXJzb3I6cG9pbnRlcjsKCWJvcmRlcjoxMHB4IHNvbGlkICNGRkVDQkY7Cglib3JkZXItcmFkaXVzOjIwcHg7Cglmb250LXNpemU6MWVtOwoJdGV4dC1hbGlnbjpsZWZ0OwoJbWFyZ2luOjAgYXV0bzsKfQoKZGl2LmhlbHAKewoJY29sb3I6I2Q4YTM3MzsKCWJhY2tncm91bmQtY29sb3I6I0NDRjsKCWRpc3BsYXk6YmxvY2s7Cgl2aXNpYmlsaXR5OnZpc2libGU7CgljdXJzb3I6cG9pbnRlcjsKCWJvcmRlcjoxMHB4IHNvbGlkICNDQ0Y7Cglib3JkZXItcmFkaXVzOjMwcHg7Cglmb250LXNpemU6MWVtOwoJdGV4dC1hbGlnbjpjZW50ZXI7Cn0KPC9zdHlsZT4KCg==</value>
  </data>
  <data name="Template_Html_Html" xml:space="preserve">
    <value>PCFET0NUWVBFIEhUTUw+CjxodG1sPgo8aGVhZD4KCTxtZXRhIGNoYXJzZXQ9InV0Zi04IiAvPgoJPHNjcmlwdD48L3NjcmlwdD4KCTxzdHlsZT48L3N0eWxlPgoJPHRpdGxlPjwvdGl0bGU+CjwvaGVhZD4KPEJvZHk+PC9Cb2R5Pgo8L2h0bWw+Cg==</value>
  </data>
  <data name="Template_Html_Script" xml:space="preserve">
    <value></value>
  </data>
  <data name="Template_Info" xml:space="preserve">
    <value>ewogICAgIkF1dGhvck5hbWUiOiAi5LiJ6K+t5rKrIiwKICAgICJBdXRob3JQdWJLZXkiOiAicHVia2V5IiwKCSJQdWJsaXNoZXJQdWJLZXkiOiJMUzB0TFMxQ1JVZEpUaUJRVlVKTVNVTWdTMFZaTFMwdExTMEtUVWxKUWtscVFVNUNaMnR4YUd0cFJ6bDNNRUpCVVVWR1FVRlBRMEZST0VGTlNVbENRMmRMUTBGUlJVRnpjbVpJY21kalYyNWpNMHQzZDAwMWJWQklkUXBtTDA1UVVWaFNjRmcxTWtjek9HbFZOekozSzNoaWRqVk5URUZvWjNaU2EweGxSRFpxYzBaYVFVSkROblJSTkZkS1QxWlFSelozU0dOUVIzZEVNM0JYQ21aNEszTk1hMnBCZUV3MFRWZGFOek5rVlVsTVMwSm5PVXN2U1V4V2RuWlRaRGhSWjBWaWRtOWFiVmxqUVVkSWRYSnZORWM0ZUhRd1JscHRWemhJVERNS1RsRm1OVEJzVldWT1VWa3hSa2xSS3l0eVZXNWxTRVpqTHpCYVNtaGtWakZ4T0RBemFGcFZSR00zYVVKSGJreENXalp1WjIxUlVHRlhiSEJNY25kYWN3cE5lRk12S3l0bVNXaE5jbEkyTVdZemNuaDFVazVPVjBadmRUY3lObWhrV0VKQ1FYcGpORWhDYzFKTk5uUm1OV05TVFRWT2J6aEthMDFZYVM5d1RHSldDbkpvUmpsamVtdE9ZbmhpTUdOQ09GWjZhak4zUkdFMVZUSlRVMU55WjJaNGNGRlFLek12YVhVd1RFcEpUbkZGVkVsa2RXUTBNV3g0Um1KWVNHMTNOek1LU0ZGSlJFRlJRVUlLTFMwdExTMUZUa1FnVUZWQ1RFbERJRXRGV1MwdExTMHRDZz09IiwKICAgICJQcm9kdWNlck5hbWUiOiAibW9jaGFqb2UiLAogICAgIlByb2R1Y3Rpb25Tb2Z0d2FyZSI6ICJPdWF0VGlhbllhSHRtbE1ha2VyIHYxLjAiLAogICAgIk93bmVyTmFtZSI6ICJmdW4iLAogICAgIk93bmVyUHJpS2V5IjogIkxTMHRMUzFDUlVkSlRpQlFVa2xXUVZSRklFdEZXUzB0TFMwdENrMUpTVVYyZDBsQ1FVUkJUa0puYTNGb2EybEhPWGN3UWtGUlJVWkJRVk5EUWt0cmQyZG5VMnhCWjBWQlFXOUpRa0ZSUkV4clYweDJWSFp2UldWcmRuSUtPVGx3Tms1UU1XWmxXRzVxYWtNek5HTkVWbGR2VjJsYVNVUm5ZbHBTVW5RemMySkpSVTgxTjNOSE9WbHpTV1V4WjFwNFdVVk1TVEI2V0RWVFUxa3phd3BMYjBFMmN6VnBhMHRMTDFadWNsZE9PR040UnpSUVVHRjNMMmt4UVdWTmNtdFNXakpTTjJKak9HSTRibll6YUZsdU4xaFhabmxEY1c4MVkyRTRURlpFQ2xwcFpFRkJSMmd3WXpjM2ExcEJkVGswT0hNMGEwSjNRVXhyY201Qk5WUlNURE0zTDBaSmJqZEdiVFpqV0dSSmMwaG5VVmQ1TTFkaFYzRlJhV0V5U0hNS1ZHRmhVbU5UUWtoVFpFeDZlVVJPVDBKRWNESlNhSFpEZGk5TE5HRk5abXcyZUVwWEwwTnpVM0ZMUmxFeWMzUmlkbmhFWW5oWU1taFBUSGRzUkVWcFFRcFVZV3BPVm1KM1kyNXJObnBOY0VSR2IybHBVbTVVVW5aNFNFbGxkVWRzTVRGaGN6Vm5iR3BsVDNsVVZUQldiblV4ZWs5eGJWQjNSblIzVmpkbFlsQndDbkpIVmsxallrOXdRV2ROUWtGQlJVTm5aMFZDUVV0cFMwMXdUbGh1UVVKb1JVMU1TbUp2VjBodll5dFBWRGRDY0hWNFdHRk5VVGhOYWtGR1ltWTFhVThLTURVNGVuUjJhV3h5UVRKVlVXeDJNM0pEVWtkeWVEZHhheXRFVERCcE5XMHpObVJ6TWsxWVFrNUVkVlo0UWpkc1ZFRlBPV3RvWlUwek9XcGpUQ3R2VGdwTFpuaEZTRFJxUjFRd2QxZHBkVVp3TUZWWWRURlRjRWRFZEVjMGNEYzJVMVpGUkRsTWNtNDJia2xFZERRM2NFMWhjbmhLUVZaU1VGaENPVFpPUjBkWENsSXlaazR5TTNCTEsxVlhabmRUUlVwTFNuRlpUbVI1ZW1kU1JsaGxiMHg1ZEVSbmJ6bEZOR0p1V1VJMVltZzBZbkIzVUdKNVExUjJRMEZ0TDJ4TGRpOEthelJEYzBFMGNuTjVhRU5vWWtoSVlYTnhVMjVRVDNoUldXUjNSMWt4V1hGMFYzTkpTMUZDTnl0dVRXWTFkV042WjJnM1JuQjNNbFUwV1dObVEwbG9TQW94UVhGYVNrTldkSEZzTDFWMlprTjJObXBrVHpKM05HSjJlamRIWTI1dWJrb3pMM0ZoTjBWcVpXaEZRMmRaUlVFMlMxZEdSMUZTV1ZCbVJVeFFSbXA0Q205UVV6SnVjWGhXTjBOSGJsRnNWbmxWV0hwWmR6Z3dhMUJSYWtsT1kyOXVWVzkwYUV0TFlYSnFjR0ZuZEdaNGRVbEpTV3N4VlZGUVEzSjBVbkozWWxBS01GUlBSSFo1WnpnNGFqQTRZVnBuVms5QlJuUktXRTVaYmxGek0wTmtLeXR2UTBoV056SnNkVXBhVUhKeFYyUmpOMWsyVTFkWVJreFJlSGx4VjFkMGFBcDNibWxHVERVME5IaGpWV016TUVGamJGZHhaV1JSY2tWM2JXTkRaMWxGUVRSQlEyTjRjVE54U0hSMFN6ZDFlVXhLTVZGbWJHVTJSa0pqZGk4MEsxTTJDa3BuWmtwWU56UkZURTlJTW1FMFRXMVBVa04wZUZOR1dIVkpVMVI2U0hkeU15dHJWekJyWjJkRFpVSjBNRWhzVG1WMVpscHZWRmx2TjFvMGRtNXhNbFlLTVd4NVFUUXhWRGR3TkZJMVluVkRWR3hSTDBrNGVWVnNWR2w1TWtOemNIRnVhVFkxTTBkNFlrc3hkVTFHYTI5cVNVbHBkR2xOY0VaNFFXSktPWGxCWmdwd1YxbEJhVzl0TjNJeU9FTm5XVUZPYlRCcGNXbDFaVU5VSzNaQ1ZITTFja0pKVkRsNVRWTktkQzl2Y0ZablowZHVaeXR5WlM4NFNHeDBSRzB6U0dweENsTm1ObGgxZHk5RWJXbHRlVWQ0TlhoNGEzSlVUV3hVVXpSMGRraExaRmhVZGxocFUwbEpPVmc1TlRkc05tbEJjbXN5U0Vnd0wxRXhNSGxqV0RZM09HZ0tZa2hyZG5SSVNHUjJjMWxGZEZkbWJ5dFFTekJUYmpCR1dYUk1VSGRuYTBseU4xaFRZME5YVURRMVVuQjBhakF4ZFM5UGFXdHpkWEJPZDB0Q1oxRkRNZ3BYUTJ4SVNHMXRORUp4Um1kRWVGSlVlRzl2Vkhaa09YaFZXbWRVYUhGNk1YRnNPRVl6YVU0NUsyTTVhbmMxV1VrelFXWnZjMlpUTjJ0emFsSnhOemN6Q21aalNVUkhXVEZxU0U1MWJqSnBZakZTZFd0Rk56VmhkbTQxV2paSlEyOWhTSEZGV1RkaFVWSjNTMmQwVm5kcmMxUllXWGxZSzIxWVZYQlJOa0Z1TlRZS1JpdFdZV2h4V2sxcVJFSnJUVXRQV25Bd2JFVlZaM2R4ZGpkQlIzbEtTMkZVU1dScFVIazJWMXAzUzBKblVVTndkbFpEYjJWbmFHWTBRa0pPUmpKNGNncE5UV3BWUVNzME9HczFOMDl2TDNKU2IybFliVmRNVldGM1JtczFiVTFIU0VNd05tbzJTbGx5U0ZwMmRUTnJWVlZXVUZwalZuQm5VREpFZWxKUVFWbG1DamszWlVaUlNqQjZiak41YkdGMFoycGpaVE5ZVlhKUVkwRlhZMUZQZDNGVGFtczJjRzAyU1hOTGQzSXdUblZOYzA4dlEwMXlRelpWYlVKRU9UTXpWbFFLSzB0V1RuRm9PVEpaS3pWU1FuVkhSbVp2YzFGQk9FTlhkMUU5UFFvdExTMHRMVVZPUkNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PSIsCiAgICAiQ29uZmlnIjogIjEiLAogICAgIlRpdGxlIjogIlvlj7PlsrjmloflrZdd5pqX5oGL55u05aWz5a2m5aa555qE5pel5a2QIiwKICAgICJJbnRyb2R1Y3Rpb24iOiAidmFsdWUiLAogICAgIkNoYXB0ZXJzTnVtYmVyIjogInZhbHVlIgkKfQ==</value>
  </data>
</root>